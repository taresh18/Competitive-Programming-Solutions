#include<bits/stdc++.h>
#include <limits>
using namespace std;
typedef unsigned long long int ull;
typedef long long int ll;
typedef long double ld;
#define f(i, n) for( ll i=0 ; i<n ; i++ )
#define fa(i, a, b) for( ll i=a ; i<b ; i++ )
#define pb push_back
#define MOD 1000000007
 
//const ll MAX = 10000005;
//vector <bool> isPrime(MAX+1, true);
 
void faster(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
}
 
ll expo(ll a, ll b, ll c = MOD) {
	ll ans = 1;
	while(b != 0) {
		if(b % 2 == 1) {
			ans *= a;
			ans %= c;
		}
		a = a * a;
		a %= c;
		b /= 2;
	}
	return ans;
}
 
ll nCr(ll n, ll r) {
	ll p = 1, k = 1;
	if(n - r < r)
		r = n - r;
	if(r != 0) {
		while(r) {
			p *= n;
			k *= r;
			ll g = __gcd(p, k);
			p /= g;
			k /= g;
			n--;
			r--;
		}
	}
	else
		p = 1;
	return p;
}
 
ll fact(ll n) {
	if(n == 1 || n == 0) {
		return 1;
	}
	return n * fact(n - 1);
}
 
ll dearrange(ll n) {
	ll ans = 0;
	f(i, n + 1) {
		ans += pow(-1, i) * (fact(n) / fact(i));
	}
	return ans;
}
 
ll prod(ll a, ll b, ll c = MOD) {
	ll ans = 0;
	while(b != 0) {
		if(b % 2 == 1) {
			ans += a;
			ans %= c;
		}
		a = a + a;
		a %= c;
		b /= 2;
	}
	return ans;
}

#define in_range(x, y, r, c) (x >= 0 && x < r && y >= 0 && y < c)

queue <pair <ll, ll>> q;

void bfs(char mat[182][182], ll dis[182][182], ll x, ll y, ll r, ll c) {
	
	ll a, b;
	dis[x][y] = 0;
	q.push({x, y});
	
	while(!q.empty()) {
		ll i = q.front().first;
		ll j = q.front().second;
		q.pop();
		
		a = i-1;
		b = j;
		if(in_range(a, b, r, c) && dis[a][b] > dis[i][j] + 1 && mat[a][b] == '0') {
			q.push({a, b});
			dis[a][b] = dis[i][j] + 1;
		}
		
		a = i+1;
		b = j;
		if(in_range(a, b, r, c) && dis[a][b] > dis[i][j] + 1 && mat[a][b] == '0') {
			q.push({a, b});
			dis[a][b] = dis[i][j] + 1;
		}
		
		a = i;
		b = j-1;
		if(in_range(a, b, r, c) && dis[a][b] > dis[i][j] + 1 && mat[a][b] == '0') {
			q.push({a, b});
			dis[a][b] = dis[i][j] + 1;
		}
		
		a = i;
		b = j+1;
		if(in_range(a, b, r, c) && dis[a][b] > dis[i][j] + 1 && mat[a][b] == '0') {
			q.push({a, b});
			dis[a][b] = dis[i][j] + 1;
		}
	}
	
}


 
int main() {
	faster();
	
	char mat[182][182], ch;
	ll t, r, c, dis[182][182];
	cin >> t;
	while(t--) {
		cin >> r >> c >> ch;
		
		f(i, r) {
			f(j, c) {
				cin >> mat[i][j];
				dis[i][j] = MOD;
			}
			cin >> ch;
		}
		
		f(i, r) {
			f(j, c) {
				if(mat[i][j] == '1') 
					bfs(mat, dis, i, j, r, c);
			}
		}
		
		f(i, r) {
			f(j, c) 
				cout << dis[i][j] <<" ";
			cout << endl;
		}
		cout << endl;
		
	}	

	
}