#include<bits/stdc++.h>
#include <limits>
using namespace std;
typedef unsigned long long int ull;
typedef long long int ll;
typedef long double dll;
#define f(i, n) for( ll i=0 ; i<n ; i++ )
#define fa(i, a, b) for( ll i=a ; i<b ; i++ )
#define pb push_back
#define MOD 1000000007
 
//const ll MAX = 10000005;
//vector <bool> isPrime(MAX+1, true);
 
void faster(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
}
 
ll expo(ll a, ll b, ll c = MOD) {
	ll ans = 1;
	while(b != 0) {
		if(b % 2 == 1) {
			ans *= a;
			ans %= c;
		}
		a = a * a;
		a %= c;
		b /= 2;
	}
	return ans;
}
 
ll nCr(ll n, ll r) {
	ll p = 1, k = 1;
	if(n - r < r)
		r = n - r;
	if(r != 0) {
		while(r) {
			p *= n;
			k *= r;
			ll g = __gcd(p, k);
			p /= g;
			k /= g;
			n--;
			r--;
		}
	}
	else
		p = 1;
	return p;
}

ll power(ll x, ll y, ll p) {
    ll res = 1;  
    x = x % p;  
    while (y > 0) {  
        if (y & 1) 
            res = (res * x) % p;  
        y = y >> 1; // y = y/2 
        x = (x * x) % p; 
    } 
    return res; 
} 
  
ll modInverse(ll n, ll p) {
    return power(n, p - 2, p); 
} 

ll nCrMod(ll n, ll r, ll p = MOD) {
    if (r == 0) 
        return 1; 
	ll fac[n + 1]; 
    fac[0] = 1; 
    for (ll i = 1; i <= n; i++) 
        fac[i] = (fac[i - 1] * i) % p; 
        
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p; 
} 

 
ll fact(ll n) {
	if(n == 1 || n == 0) {
		return 1;
	}
	return n * fact(n - 1);
}
 
ll dearrange(ll n) {
	ll ans = 0;
	f(i, n + 1) {
		ans += pow(-1, i) * (fact(n) / fact(i));
	}
	return ans;
}
 
ll prod(ll a, ll b, ll c = MOD) {
	ll ans = 0;
	while(b != 0) {
		if(b % 2 == 1) {
			ans += a;
			ans %= c;
		}
		a = a + a;
		a %= c;
		b /= 2;
	}
	return ans;
}


ll modFact(ll n, ll p = MOD) {
    if (n >= p) 
        return 0; 
  
    ll result = 1; 
    for (ll i = 1; i <= n; i++) 
        result = (result * i) % p; 
  
    return result; 
} 
  
int main() {
	faster();
	
	ll n, x, pos, ans=0;
	cin >> n >> x >> pos;
	ll arr[n+1];
	memset(arr, 0, sizeof(arr));
	ll lo = 0, hi = n;
	
	while(lo < hi) {
		ll mid = (lo + hi) / 2;
		if(mid <= pos) {
			lo = mid + 1;
			arr[mid] = 1;
		}
		else {
			hi = mid;
			arr[mid] = -1;
		}
	}
	
	ll small=0, large=0;
	f(i, n+1) {
		if(arr[i] == 1)
			small++;
		else if(arr[i] == -1)
			large++;
	}
	//cout << small << " " << large << "\n";
	
	if(small > x  || large > (n - x)) {
		ans = 0;
	}
	else {
		ans = (nCrMod(x-1, small-1 ) % MOD)*(modFact(small-1) % MOD);
		//cout << ans << endl;
		ans %= MOD;
		
		ans *= ((nCrMod(n-x, large) % MOD) * (modFact(large) % MOD) % MOD);
		ans %= MOD;
		ans *= modFact(n - (small + large));
		ans = ans % MOD;
	}
	cout << ans;

	
	
}