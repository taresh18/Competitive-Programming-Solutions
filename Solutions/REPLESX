#include<bits/stdc++.h>
#include <limits>
using namespace std;
typedef unsigned long long int ull;
typedef long long int ll;
typedef long double dll;
#define f(i, n) for( ll i=0 ; i<n ; i++ )
#define fa(i, a, b) for( ll i=a ; i<b ; i++ )
#define pb push_back
#define MOD 1000000007
 
//const ll MAX = 10000005;
//vector <bool> isPrime(MAX+1, true);
 
void faster(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
}
 
ll expo(ll a, ll b, ll c = MOD) {
	ll ans = 1;
	while(b != 0) {
		if(b % 2 == 1) {
			ans *= a;
			ans %= c;
		}
		a = a * a;
		a %= c;
		b /= 2;
	}
	return ans;
}
 
ll nCr(ll n, ll r) {
	ll p = 1, k = 1;
	if(n - r < r)
		r = n - r;
	if(r != 0) {
		while(r) {
			p *= n;
			k *= r;
			ll g = __gcd(p, k);
			p /= g;
			k /= g;
			n--;
			r--;
		}
	}
	else
		p = 1;
	return p;
}
 
ll fact(ll n) {
	if(n == 1 || n == 0) {
		return 1;
	}
	return n * fact(n - 1);
}
 
ll dearrange(ll n) {
	ll ans = 0;
	f(i, n + 1) {
		ans += pow(-1, i) * (fact(n) / fact(i));
	}
	return ans;
}
 
ll prod(ll a, ll b, ll c = MOD) {
	ll ans = 0;
	while(b != 0) {
		if(b % 2 == 1) {
			ans += a;
			ans %= c;
		}
		a = a + a;
		a %= c;
		b /= 2;
	}
	return ans;
}
 
int main() {
	faster();
	
	int t;
	cin >> t;
	while(t--) {
		ll N, X, p, k, xid;
		cin >> N >> X >> p >> k;
		ll arr[N+1];
		int flag = 0;
		for(ll i = 1; i <=N; i++) 
			cin >> arr[i];
			
		sort(arr + 1, arr + N + 1);
		
		for(ll i = 1; i <=N; i++) {
			if(arr[i] == X) {
				flag = 1;
				xid = i;
				break;
			}
		}
		if(flag == 1) {
			if(arr[p] == X)
				cout << 0;
			else if(k <= p && X >= arr[p]) {
				cout << abs(xid - p);
			}
			else if(k >= p && X <= arr[p]) {
				for(ll i = 1; i <=N; i++) {
					if(arr[i] == X) {
					xid = i;
			        }
		        }
				cout << abs(xid - p);
			}
			else
				cout << -1;
		}
		else {
			arr[k] = X;
			sort(arr + 1, arr + N + 1);
			for(ll i = 1; i <=N; i++) {
				if(arr[i] == X) {
					xid = i;
					break;
				}
			}
			if(arr[p] == X)
				cout << 1;
			else if(k <= p && X >= arr[p]) {
				cout << 1 + abs(xid - p);
			}
			else if(k >= p && X <= arr[p]) {
				cout << 1 + abs(xid - p);
			}
			else
				cout << -1;
		}
		cout << endl;
	}
	
}