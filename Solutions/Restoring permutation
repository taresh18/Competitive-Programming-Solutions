#include<bits/stdc++.h>
#include <limits>
using namespace std;
typedef unsigned long long int ull;
typedef long long int ll;
typedef long double ld;
#define f(i, n) for( ll i=0 ; i<n ; i++ )
#define fa(i, a, b) for( ll i=a ; i<b ; i++ )
#define pb push_back
#define MOD 1000000007
 
//const ll MAX = 10000005;
//vector <bool> isPrime(MAX+1, true);
 
void faster(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
}
 
ll expo(ll a, ll b, ll c = MOD) {
	ll ans = 1;
	while(b != 0) {
		if(b % 2 == 1) {
			ans *= a;
			ans %= c;
		}
		a = a * a;
		a %= c;
		b /= 2;
	}
	return ans;
}
 
ll nCr(ll n, ll r) {
	ll p = 1, k = 1;
	if(n - r < r)
		r = n - r;
	if(r != 0) {
		while(r) {
			p *= n;
			k *= r;
			ll g = __gcd(p, k);
			p /= g;
			k /= g;
			n--;
			r--;
		}
	}
	else
		p = 1;
	return p;
}
 
ll fact(ll n) {
	if(n == 1 || n == 0) {
		return 1;
	}
	return n * fact(n - 1);
}
 
ll dearrange(ll n) {
	ll ans = 0;
	f(i, n + 1) {
		ans += pow(-1, i) * (fact(n) / fact(i));
	}
	return ans;
}
 
ll prod(ll a, ll b, ll c = MOD) {
	ll ans = 0;
	while(b != 0) {
		if(b % 2 == 1) {
			ans += a;
			ans %= c;
		}
		a = a + a;
		a %= c;
		b /= 2;
	}
	return ans;
}
 
int main() {
	faster();
	
	ll t;
	cin >> t;
	while(t--) {
		ll n;
		cin >> n;
		ll arr[n], min[n], max[n];
		set <ll> s1;
		set <ll, greater<ll>> s2;
		memset(min, 0, sizeof(min));
		memset(max, 0, sizeof(max));

		f(i, n) {
			s1.insert(i+1);
			s2.insert(i+1);
		}
		

		
		f(i, n) {
			cin >> arr[i];
			if(i) {
				if(arr[i] != arr[i-1]) {
					min[i] = arr[i];
					max[i] = arr[i];
					s1.erase(arr[i]);
					s2.erase(arr[i]);
				}
			}
			else {
				min[i] = arr[i];
				max[i] = arr[i];
				s1.erase(arr[i]);
				s2.erase(arr[i]);
			}
		}
		
		
		
		f(i, n) {
			if(min[i] == 0) {
				ll x = *(s1.begin());
				min[i] = x;
				s1.erase(x);
			}
			if(max[i] == 0) {
				ll x;
				for(auto j = s2.begin(); j!= s2.end(); j++) {
					if(*j < max[i-1]) {
						x = *j;
						break;
					}
				}
				max[i] = x;
				s2.erase(x);
			}
				
		}
		f(i, n) {
			cout << min[i] << " ";
		}
		
		cout << endl;
		f(i, n) {
			cout << max[i] << " ";
		}
		cout << endl;
	}
	
	
}